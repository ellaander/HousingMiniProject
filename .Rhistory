)
#make predictions on models
predictions_knn <- predict(model_knn_cv, newdata = prediction_df)
predictions_splines <- predict(fit, newdata = prediction_df)
predictions_lm <- predict(linreg_model, newdata = prediction_df)
predicted_gdp <- data.frame(
kNN = predictions_knn,
Splines = predictions_splines,
'Linear Regression' = predictions_lm
)
predicted_gdp
library(dplyr)
library(ggplot2)
library(dbplyr)
library(kableExtra)
install.packages("kableExtra")
library(dplyr)
library(ggplot2)
library(dbplyr)
library(kableExtra)
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
housingdata <- head(housingdata)
kbl(housingdata) %>%
kable_paper() %>%
scroll_box(width = "800px", height = "325px")
View(housingdata)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(kableExtra)
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
View(housingdata)
model = lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
model_summary = summary(model)
View(model_summary)
model
install.packages("vetiver")
install.packages("plumber")
## create API -> http://127.0.0.1:8000/predict
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## create API -> http://127.0.0.1:8000/predict
pr() %>%
vetiver_api(v) %>%
pr$run(port = 8080)
install.packages("plumber")
install.packages("plumber")
# Load the data
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
# Train the linear model
model <- lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
# Now run the API on port 8080
pr$run(port = 8080)
install.packages("pins")
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
library(magrittr)
r$run(port = 8080)
# Create and store the model on a temporary board
model_board <- board_temp(versioned = TRUE)
print(r)  # This should print the plumber object without errors.
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board <- board_local(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
print(sold_price_prediction(1,2,3))
print(sold_price_prediction(1,2,3))
newdata <- data.frame(Garage.Stalls = Garage.Stalls, Total.Bedrooms=Total.Bedrooms, Total.Bathrooms=Total.Bathrooms)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(dbplyr)
# load the data
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
# train the linear model
model <- lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
## prediction functions
sold_price_prediction <- function(Garage.Stalls, Total.Bedrooms, Total.Bathrooms)
{
newdata <- data.frame(Garage.Stalls = Garage.Stalls, Total.Bedrooms=Total.Bedrooms, Total.Bathrooms=Total.Bathrooms)
predict(model, newdata, type = "response")
}
print(sold_price_prediction(1,2,3))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(dbplyr)
# load the data
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
# train the linear model
model <- lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
## prediction functions
sold_price_prediction <- function(Garage.Stalls, Total.Bedrooms, Total.Bathrooms)
{
newdata <- data.frame(Garage.Stalls = Garage.Stalls, Total.Bedrooms=Total.Bedrooms, Total.Bathrooms=Total.Bathrooms)
predict(model, newdata, type = "response")
}
print(sold_price_prediction(1,2,3))
saveRDS(model, "model.rds")
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
View(housing_data)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## Define Model and Fit
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## Turn into Vetiver Model
library(vetiver)
v = vetiver_model(model, model_name='penguin_model')
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:8080
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
library(vetiver)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:8080
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
library(pins)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:8080
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 4175)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 4175)
library(shiny); runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
library(shiny); runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
library(vetiver)
library(plumber)
# Train the model
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
# Vetiver modela
v <- vetiver_model(model, model_name = "housing_model")
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
8080
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
library(vetiver)
library(plumber)
# Train the model
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
# Vetiver modela
v <- vetiver_model(model, model_name = "housing_model")
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
## Define Model and Fit
model = lm(body_mass_g ~ bill_length_mm + species + sex, data = df)
model_summary = summary(model)
## Turn into Vetiver Model
library(vetiver)
v = vetiver_model(model, model_name='penguin_model')
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
## Define Model and Fit
model = lm(body_mass_g ~ bill_length_mm + species + sex, data = df)
model_summary = summary(model)
## Turn into Vetiver Model
library(vetiver)
v = vetiver_model(model, model_name='penguin_model')
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp()
# load data
house_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/pc1/Desktop/GitHub/HousingMiniProject")
setwd("/Users/pc1/Desktop/GitHub/HousingMiniProject")
# load data
house_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
Bedrooms <- house_data$Total.Bedrooms
hist(Bedrooms)
Bathrooms <- house_data$Total.Bathrooms
hist(Bathrooms)
ggplot(house_data) +
# total bathrooms vs sold price
geom_point(aes(x = Sold.Price, y = Total.Bathrooms), color = "blue", alpha = 0.6) +
# total bedrooms vs sold price
geom_point(aes(x = Sold.Price, y = Total.Bedrooms), color = "red", alpha = 0.6) +
# Labels and title
labs(
title = "Total Bathrooms and Bedrooms vs Sold Price",
x = "Sold Price",
y = "Count of Bathrooms/Bedrooms"
) +
# legend
scale_color_manual(values = c("blue" = "Bathrooms", "red" = "Bedrooms"))
library(ggplot2)
# load data
house_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
ggplot(house_data) +
# total bathrooms vs sold price
geom_point(aes(x = Sold.Price, y = Total.Bathrooms), color = "blue", alpha = 0.6) +
# total bedrooms vs sold price
geom_point(aes(x = Sold.Price, y = Total.Bedrooms), color = "red", alpha = 0.6) +
# Labels and title
labs(
title = "Total Bathrooms and Bedrooms vs Sold Price",
x = "Sold Price",
y = "Count of Bathrooms/Bedrooms"
) +
# legend
scale_color_manual(values = c("blue" = "Bathrooms", "red" = "Bedrooms"))
ggplot(house_data) +
# total bathrooms vs sold price
geom_point(aes(x = Total.Bathrooms, y = Sold.Price), color = "blue", alpha = 0.6) +
labs(
title = "Total Bathrooms and Bedrooms vs Sold Price",
x = "Total Bathrooms",
y = "Sold Price"
)
ggplot(house_data) +
# total bathrooms vs sold price
geom_point(aes(x = Total.Bathrooms, y = Sold.Price), color = "blue", alpha = 0.6) +
geom_smooth(aes(x = Total.Bathrooms, y = Sold.Price), color = "pink", method = "lm", se = FALSE) +
labs(
title = "Total Bathrooms and Bedrooms vs Sold Price",
x = "Total Bathrooms",
y = "Sold Price"
)
library(ggplot2)
# load data
house_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
knitr::opts_chunk$set(echo = TRUE)
Bedrooms <- house_data$Total.Bedrooms
hist(Bedrooms)
Bathrooms <- house_data$Total.Bathrooms
hist(Bathrooms)
ggplot(house_data) +
# total bathrooms vs sold price
geom_point(aes(x = Total.Bathrooms, y = Sold.Price), color = "blue", alpha = 0.6) +
geom_smooth(aes(x = Total.Bathrooms, y = Sold.Price), color = "red", method = "lm", se = FALSE) +
labs(
title = "Total Bathrooms vs Sold Price",
x = "Total Bathrooms",
y = "Sold Price"
)
ggplot(house_data) +
# total bedrooms vs sold price
geom_point(aes(x = Total.Bedrooms, y = Sold.Price), color = "blue", alpha = 0.6) +
geom_smooth(aes(x = Total.Bedrooms, y = Sold.Price), color = "red", method = "lm", se = FALSE) +
labs(
title = "Total and Bedrooms vs Sold Price",
x = "Total Bedrooms",
y = "Sold Price"
)
shiny::runApp()
