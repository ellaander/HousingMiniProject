results <- data.frame(
Actual = test_data$GDP_current_US,
Predicted = pred$fit
)
summary(fit)
# visualize results
ggplot(results, aes(y = exp(Actual), x = exp(Predicted))) +
geom_point() +
geom_abline(color = "red") +
scale_y_log10() +
scale_x_log10() +
labs(x = "Predicted GDP", y = "Actual GDP", title = "Actual vs Predicted GDP (Splines)")
linreg_model <- lm(GDP_current_US ~ women_in_gov + women_passport + women_household + women_house_location + women_get_job + women_bank_account + women_business + women_outside + women_travel + women_night + women_danger + women_remarry + sexual_harrasment_punishment + women_pregnant_work + mothers_paid_leave + fathers_paid_leave + life_expectancy_diff + labor_force_diff + employers_diff, data = train_data)
pred <- predict(linreg_model, newdata = test_data, se = TRUE)
pred_results <- postResample(pred$fit,test_data$GDP_current_US)
overall_results <- rbind(overall_results, c('Linear Regression', pred_results[1], pred_results[2], pred_results[3]))
colnames(overall_results)[c(1,2,3,4)] <- c("Model", "RMSE", "RSquared", "MAE")
# results for visualizing
results <- data.frame(
Actual = test_data$GDP_current_US,
Predicted = pred$fit
)
summary(linreg_model)
# visualize results
ggplot(results, aes(y = exp(Actual), x = exp(Predicted))) +
geom_point() +
geom_abline(color = "red") +
scale_y_log10() +
scale_x_log10() +
labs(x = "Predicted GDP", y = "Actual GDP", title = "Actual vs Predicted GDP (Linear Regression)")
#values made relative to quartiles in data as well as accounting for extreme outlier values for max and min with skewed data
prediction_df <- data.frame(
country_year = c("Country1 Extreme Positives", "Country2 Extreme Negative", "Country3 Equal Values"),
women_passport = c(0.3, -0.5, 0),
women_household = c(0.3, -0.5, 0),
women_house_location = c(0.3, -0.5, 0),
women_get_job = c(0.3,-0.5, 0),
women_bank_account = c(0.3, -0.5, 0),
women_business = c(0.3,-0.5, 0),
women_outside = c(1, -0.5, 0),
women_travel = c(1, -0.5, 0),
women_night = c(0.75, -1, 0),
women_danger = c(0.75, -1, 0),
women_remarry = c(0.75, -1, 0),
sexual_harrasment_punishment = c(0.5, -0.5, 0),
women_pregnant_work = c(0.5, -1, 0),
mothers_paid_leave = c(0.5, -1, 0),
fathers_paid_leave = c(0.5, -1, 0),
women_in_gov = c(0.5, -1, 0),
life_expectancy_diff = c(0.75, -0.75, 0),
employers_diff = c(3, -3, 0),
labor_force_diff = c(0.3, -0.3, 0)
)
#make predictions on models
predictions_knn <- predict(model_knn_cv, newdata = prediction_df)
predictions_splines <- predict(fit, newdata = prediction_df)
predictions_lm <- predict(linreg_model, newdata = prediction_df)
predicted_gdp <- data.frame(
kNN = predictions_knn,
Splines = predictions_splines,
'Linear Regression' = predictions_lm
)
predicted_gdp
library(dplyr)
library(ggplot2)
library(dbplyr)
library(kableExtra)
install.packages("kableExtra")
library(dplyr)
library(ggplot2)
library(dbplyr)
library(kableExtra)
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
housingdata <- head(housingdata)
kbl(housingdata) %>%
kable_paper() %>%
scroll_box(width = "800px", height = "325px")
View(housingdata)
library(dplyr)
library(ggplot2)
library(dbplyr)
library(kableExtra)
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
View(housingdata)
model = lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
model_summary = summary(model)
View(model_summary)
model
install.packages("vetiver")
install.packages("plumber")
## create API -> http://127.0.0.1:8000/predict
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## create API -> http://127.0.0.1:8000/predict
pr() %>%
vetiver_api(v) %>%
pr$run(port = 8080)
install.packages("plumber")
install.packages("plumber")
# Load the data
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
# Train the linear model
model <- lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
# Now run the API on port 8080
pr$run(port = 8080)
install.packages("pins")
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
library(magrittr)
r$run(port = 8080)
# Create and store the model on a temporary board
model_board <- board_temp(versioned = TRUE)
print(r)  # This should print the plumber object without errors.
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board <- board_local(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
print(sold_price_prediction(1,2,3))
print(sold_price_prediction(1,2,3))
newdata <- data.frame(Garage.Stalls = Garage.Stalls, Total.Bedrooms=Total.Bedrooms, Total.Bathrooms=Total.Bathrooms)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(dbplyr)
# load the data
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
# train the linear model
model <- lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
## prediction functions
sold_price_prediction <- function(Garage.Stalls, Total.Bedrooms, Total.Bathrooms)
{
newdata <- data.frame(Garage.Stalls = Garage.Stalls, Total.Bedrooms=Total.Bedrooms, Total.Bathrooms=Total.Bathrooms)
predict(model, newdata, type = "response")
}
print(sold_price_prediction(1,2,3))
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(dbplyr)
# load the data
housingdata <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
# train the linear model
model <- lm(Sold.Price ~ Garage.Stalls + Total.Bedrooms + Total.Bathrooms, data = housingdata)
## prediction functions
sold_price_prediction <- function(Garage.Stalls, Total.Bedrooms, Total.Bathrooms)
{
newdata <- data.frame(Garage.Stalls = Garage.Stalls, Total.Bedrooms=Total.Bedrooms, Total.Bathrooms=Total.Bathrooms)
predict(model, newdata, type = "response")
}
print(sold_price_prediction(1,2,3))
saveRDS(model, "model.rds")
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
View(housing_data)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## Define Model and Fit
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## Turn into Vetiver Model
library(vetiver)
v = vetiver_model(model, model_name='penguin_model')
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:8080
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
library(vetiver)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:8080
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
library(pins)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:8080
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 4175)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 4175)
library(shiny); runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
library(vetiver)
library(pins)
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
port <- 8080
## train model
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
model
## vevtiver Model
v = vetiver_model(model, model_name='housing_model')
## board
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## API ->  http://127.0.0.1:4175
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = port)
library(shiny); runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
library(vetiver)
library(plumber)
# Train the model
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
# Vetiver modela
v <- vetiver_model(model, model_name = "housing_model")
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
8080
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
library(vetiver)
library(plumber)
# Train the model
housing_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms + Garage.Stalls, data = housing_data)
# Vetiver modela
v <- vetiver_model(model, model_name = "housing_model")
# Serve the model using Plumber on port 8080
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
DBI::dbWriteTable(con, "penguins", palmerpenguins::penguins)
DBI::dbDisconnect(con)
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
## Define Model and Fit
model = lm(body_mass_g ~ bill_length_mm + species + sex, data = df)
model_summary = summary(model)
## Turn into Vetiver Model
library(vetiver)
v = vetiver_model(model, model_name='penguin_model')
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
con <- DBI::dbConnect(
duckdb::duckdb(),
dbdir = "my-db.duckdb"
)
df <- dplyr::tbl(con, "penguins")
## Define Model and Fit
model = lm(body_mass_g ~ bill_length_mm + species + sex, data = df)
model_summary = summary(model)
## Turn into Vetiver Model
library(vetiver)
v = vetiver_model(model, model_name='penguin_model')
## Save to Board
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
## Turn model into API
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp('Desktop/GitHub/HousingMiniProject/app-api.R')
runApp()
DBI::dbDisconnect(con)
source("~/Desktop/GitHub/HousingMiniProject/data.R", echo=TRUE)
source("~/Desktop/GitHub/HousingMiniProject/model.R", echo=TRUE)
source("~/Desktop/GitHub/HousingMiniProject/model.R", echo=TRUE)
source("~/Desktop/GitHub/HousingMiniProject/model.R", echo=TRUE)
source("~/Desktop/GitHub/HousingMiniProject/model.R", echo=TRUE)
shiny::runApp('Desktop/GitHub/HousingMiniProject')
source("~/Desktop/GitHub/HousingMiniProject/model.R", echo=TRUE)
runApp('HousingModel')
runApp('HousingModel')
runApp('HousingModel')
## Get Data
library(dplyr)
library(ggplot2)
library(dbplyr)
house_data <- read.csv("https://raw.githubusercontent.com/gmtanner-cord/DATA470-2024/refs/heads/main/fmhousing/FM_Housing_2018_2022_clean.csv")
model = lm(Sold.Price ~ Total.Bedrooms + Total.Bathrooms, data = house_data)
model_summary = summary(model)
library(vetiver)
v = vetiver_model(model, model_name='house_model')
library(pins)
model_board <- board_temp(versioned = TRUE)
model_board %>% vetiver_pin_write(v)
library(plumber)
pr() %>%
vetiver_api(v) %>%
pr_run(port = 8080)
runApp('HousingModel')
runApp('Desktop/GitHub/HousingMiniProject')
runApp('Desktop/GitHub/HousingMiniProject')
shiny::runApp()
source("~/Desktop/GitHub/HousingMiniProject/model.R", echo=TRUE)
runApp()
runApp()
